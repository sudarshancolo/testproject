@using CodingTest.Models;
@model CodingTest.Models.Location
@using System.Diagnostics;

@{
    ViewData["Title"] = "Recursion Index";
}


@functions
{
    int ndx = 0;
    int ndxRec = 0;
    string strn = string.Empty;
    TagBuilder Parent = new TagBuilder("parent");

    TagBuilder Child = new TagBuilder("child");
    TagBuilder Root = new TagBuilder("root");
    TagBuilder MainNode = new TagBuilder("parent");
    List<KeyValuePair<string, TagBuilder>> taglist = new List<KeyValuePair<string, TagBuilder>>();


    public TagBuilder RecursiveMethod(Location location, List<Location> children, bool boolval)
    {
        if (boolval)
        {
            Parent = new TagBuilder(location.Name.Replace(" ", ""));
            Parent.Attributes.Add("class", "indentlength linebreak");
            Parent.GenerateId(location.Name.Replace(" ", "") + ":::" + ndx.ToString(), "");
            Parent.InnerHtml.AppendHtml(location.Name);

            MainNode = new TagBuilder(location.Name.Replace(" ", ""));
            MainNode.GenerateId(location.Name.Replace(" ", "") + ":::" + ndx.ToString(), "");
            MainNode.Attributes.Add("class", "indentlength linebreak");
            MainNode.InnerHtml.AppendHtml(location.Name);
        }

        foreach (var nn in children)
        {

            ndx++;
            if (MainNode.TagName == location.Name)
            {
                Parent = MainNode;
                taglist = new List<KeyValuePair<string, TagBuilder>>();

                // Parent reference added to Root TagBuilder. Once referenced, good for all.
                if (!Root.HasInnerHtml)
                    Root.InnerHtml.AppendHtml(Parent);
            }


            Child = new TagBuilder(nn.Name.Replace(" ", ""));
            Child.Attributes.Add("class", "indentlength linebreak");
            Child.Attributes.Add("parlocname", location.Name.Replace(" ", ""));
            Child.Attributes.Add("ndxrec", (ndxRec).ToString());
            Child.GenerateId(nn.Name.Replace(" ", "") + ":::" + ndx.ToString(), "");
            if (nn.ChildrenLocations.Count() == 0)
            {
                Child.Attributes.Add("chilocname", "NotAParent");
            }
            else
            {
                Child.Attributes.Add("chilocname", nn.Name.Replace(" ", ""));
            }

            Child.InnerHtml.AppendHtml($"{nn.Name}");
            
            taglist.Add(new KeyValuePair<string, TagBuilder>(nn.Name.Replace(" ", "") + ":::" + ndx.ToString(), Child));

            if (taglist.Count > 0)
            {
                var taglistReversed = taglist.Select(x => new KeyValuePair<string, TagBuilder>(x.Key, x.Value)).Select(y => y.Value).Reverse();

                if (ndx == 1)
                {
                    Parent.InnerHtml.AppendHtml(Child);
                    if (!Root.HasInnerHtml)
                        Root.InnerHtml.AppendHtml(Parent);
                }
                else
                {
                    foreach (var tag in taglistReversed)
                    {
                        // returns NorthAmerica
                        var cln = tag.Attributes.ToList().Where(x => x.Key == "chilocname").Select(y => y.Value).FirstOrDefault();
                        var tagIndx = tag.Attributes.ToList().Where(x => x.Key == "ndxrec").Select(y => y.Value).FirstOrDefault();
                        var chIndx = Child.Attributes.ToList().Where(x => x.Key == "ndxrec").Select(y => y.Value).FirstOrDefault();

                        if (MainNode.TagName == location.Name)
                        {
                            Parent.InnerHtml.AppendHtml(Child);

                        }
                        else if (cln == location.Name.Replace(" ", ""))
                        {
                            if (Convert.ToInt32(chIndx) - 1 != Convert.ToInt32(tagIndx))
                                continue;
                            Parent = new TagBuilder(location.Name.Replace(" ", ""));
                            Parent = tag;
                            Parent.InnerHtml.AppendHtml(Child);
                            if (!Root.HasInnerHtml)
                                Root.InnerHtml.AppendHtml(Parent);
                            break;
                        }
                    }
                }
            }

            if (children.Count > 0)
            {
                ndxRec++;
                RecursiveMethod(nn, nn.ChildrenLocations, false);
                ndxRec--;
            }
        }

        return Root;
    }
        }



<div class="text-left" id="locations">

    @{
        TagBuilder hhh = RecursiveMethod(Model, Model.ChildrenLocations, true);
    }

    @hhh

</div>
